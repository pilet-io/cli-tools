#!/bin/bash
#> [cluster]=$DEF_CLUSTER [disk]=80 [nodes]=3 [type]=r5.2xlarge [version]=1.25 [region]=$DEF_REGION

mkdir -p ~/.config/$CLUSTER
CONFIG_FILE=~/.config/$CLUSTER/eks-config.yaml

cat > $CONFIG_FILE <<EOF
apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: $CLUSTER
  region: $REGION
  version: "$VERSION"

vpc:
  id: "vpc-0bc0400504681d533"
  securityGroup: "sg-09ca3e90f70f719eb"
  subnets:
    public:
      pub-1:
        id: subnet-0bf87b7778b184793
      pub-2:
        id: subnet-0a9456a3bfa0aa582
      pub-3:
        id: subnet-02fff58e6d4f6c938
#      pub-4:
#        id: subnet-0ba898aa3aa2b30ce

managedNodeGroups:
- name: ng-$CLUSTER
  instanceTypes: ["$TYPE"]
  spot: false
  minSize: $NODES
  maxSize: 7


#nodeGroups:
#- name: ng-$NAME
#  minSize: 2
#  maxSize: 5
#  instancesDistribution:
#    maxPrice: 0.20
#    instanceTypes: ["$TYPE"]
#    onDemandBaseCapacity: 0
#    onDemandPercentageAboveBaseCapacity: 0
#    spotAllocationStrategy: "capacity-optimized-prioritized"
EOF

eksctl create cluster -f $CONFIG_FILE
#eksctl utils associate-iam-oidc-provider --region=$REGION --cluster=$CLUSTER --approve
#eksctl create iamserviceaccount --name ebs-csi-controller-sa --namespace kube-system --cluster $CLUSTER --role-name CSIDriverRole-$CLUSTER --role-only --attach-policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy --approve
#eksctl create addon --name aws-ebs-csi-driver --cluster $CLUSTER --service-account-role-arn arn:aws:iam::204071211944:role/CSIDriverRole-$CLUSTER --force
#eksctl create addon --name aws-ebs-csi-driver --cluster $CLUSTER --service-account-role-arn arn:aws:iam::204071211944:role/eks-aws-ebs-csi-driver --force
